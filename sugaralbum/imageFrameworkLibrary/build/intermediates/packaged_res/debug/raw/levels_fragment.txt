IC8qDQogKiogR2FtbWEgY29ycmVjdGlvbg0KICoqIERldGFpbHM6IGh0dHA6Ly9ibG9nLm1vdWFp
Zi5vcmcvMjAwOS8wMS8yMi9waG90b3Nob3AtZ2FtbWEtY29ycmVjdGlvbi1zaGFkZXIvDQogKi8N
Cg0KI2RlZmluZSBHYW1tYUNvcnJlY3Rpb24oY29sb3IsIGdhbW1hKQkJCQkJCQkJcG93KGNvbG9y
LCAxLjAgLyBnYW1tYSkNCg0KLyoNCiAqKiBMZXZlbHMgY29udHJvbCAoaW5wdXQgKCtnYW1tYSks
IG91dHB1dCkNCiAqKiBEZXRhaWxzOiBodHRwOi8vYmxvZy5tb3VhaWYub3JnLzIwMDkvMDEvMjgv
bGV2ZWxzLWNvbnRyb2wtc2hhZGVyLw0KICovDQoNCiNkZWZpbmUgTGV2ZWxzQ29udHJvbElucHV0
UmFuZ2UoY29sb3IsIG1pbklucHV0LCBtYXhJbnB1dCkJCQkJbWluKG1heChjb2xvciAtIG1pbklu
cHV0LCB2ZWMzKDAuMCkpIC8gKG1heElucHV0IC0gbWluSW5wdXQpLCB2ZWMzKDEuMCkpDQojZGVm
aW5lIExldmVsc0NvbnRyb2xJbnB1dChjb2xvciwgbWluSW5wdXQsIGdhbW1hLCBtYXhJbnB1dCkJ
CQkJR2FtbWFDb3JyZWN0aW9uKExldmVsc0NvbnRyb2xJbnB1dFJhbmdlKGNvbG9yLCBtaW5JbnB1
dCwgbWF4SW5wdXQpLCBnYW1tYSkNCiNkZWZpbmUgTGV2ZWxzQ29udHJvbE91dHB1dFJhbmdlKGNv
bG9yLCBtaW5PdXRwdXQsIG1heE91dHB1dCkgCQkJbWl4KG1pbk91dHB1dCwgbWF4T3V0cHV0LCBj
b2xvcikNCiNkZWZpbmUgTGV2ZWxzQ29udHJvbChjb2xvciwgbWluSW5wdXQsIGdhbW1hLCBtYXhJ
bnB1dCwgbWluT3V0cHV0LCBtYXhPdXRwdXQpIAlMZXZlbHNDb250cm9sT3V0cHV0UmFuZ2UoTGV2
ZWxzQ29udHJvbElucHV0KGNvbG9yLCBtaW5JbnB1dCwgZ2FtbWEsIG1heElucHV0KSwgbWluT3V0
cHV0LCBtYXhPdXRwdXQpDQoNCiBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7DQogdmFyeWluZyBoaWdo
cCB2ZWMyIHRleHR1cmVDb29yZGluYXRlOw0KIA0KIHVuaWZvcm0gc2FtcGxlcjJEIGlucHV0SW1h
Z2VUZXh0dXJlOw0KIHVuaWZvcm0gbG93cCB2ZWMzIG1pblZhbHVlOw0KIHVuaWZvcm0gbG93cCB2
ZWMzIG1pZFZhbHVlOw0KIHVuaWZvcm0gbG93cCB2ZWMzIG1heFZhbHVlOw0KIHVuaWZvcm0gbG93
cCB2ZWMzIG1pbk91dHB1dDsNCiB1bmlmb3JtIGxvd3AgdmVjMyBtYXhPdXRwdXQ7DQogDQogdm9p
ZCBtYWluKCkNCiB7DQogICAgIGxvd3AgdmVjNCB0ZXh0dXJlQ29sb3IgPSB0ZXh0dXJlMkQoaW5w
dXRJbWFnZVRleHR1cmUsIHRleHR1cmVDb29yZGluYXRlKTsNCiAgICAgDQogICAgIGdsX0ZyYWdD
b2xvciA9IHZlYzQoTGV2ZWxzQ29udHJvbCh0ZXh0dXJlQ29sb3IucmdiLCBtaW5WYWx1ZSwgbWlk
VmFsdWUsIG1heFZhbHVlLCBtaW5PdXRwdXQsIG1heE91dHB1dCksIHRleHR1cmVDb2xvci5hKTsN
CiB9DQog